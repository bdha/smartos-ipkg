#!/usr/bin/python2.6

import os
import re

def slurp_config(fh):
    "Read the zoneconfig file into something more convenient"
    ret = {}
    for line in fh:
        line = line.rstrip()
        key,val = line.split('=')
        ret[key] = val

    if ret['TEMPLATE_VERSION'] != '0.0.1':
        raise ValueError("Unsupported template version %s" % ret['TEMPLATE_VERSION'])

    return ret

def parse_hostname(fh):
    for line in fh:
        match = re.match('([^ ]+) netmask ([^ ]+) up', line)
        maskbits = match.group(2).split('.')

        plen = 0
        addr = 0
        for n,v in enumerate(reversed(maskbits)):
            addr += int(v) << (n * 8)

        addr = (addr & -addr)
        plen = -1
        while (addr):
            addr >>= 1
            plen += 1

        return {'ip': match.group(1), 'mask': match.group(2), 'prefix': 32 - plen}

def lexec(commandline):
    print "$ %s" % commandline
    os.system(commandline)

def main(fname):
    delq = []
    with open(fname) as f:
        # Of things currently set, we only really care about network config, in reality.
        for key, value in slurp_config(f).iteritems():
            if re.match('NET[0-9]+_INTERFACE', key):
                value=value.lower()
                hostfile = "/etc/hostname.%s" % value
                dfile = "/etc/dhcp.%s" % value
                print "Interface: %s" % value
                lexec("$ ipadm create-if %s" % value)
                if os.path.exists(hostfile):
                    with open(hostfile) as f:
                        addr = parse_hostname(f)
                        lexec("ipadm create-addr -T static -a local=%s/%s %s/v4" % (
                            addr['ip'], addr['prefix'], value))
                        delq.append(hostfile)
                else:
                    if os.path.exists(dfile):
                        delq.append(dfile)
                    lexec("ipadm create-addr -T dhcp %s/v4" % value)
        delq.append(fname)

        for elt in delq:
            print "$ rm %s" % elt
            os.unlink(elt)


if __name__ == '__main__':
    import sys

    if len(sys.argv) >= 2:
        main(sys.argv[1])
    else:
        main('/root/zoneconfig')
